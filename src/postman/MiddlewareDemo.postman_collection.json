{
	"info": {
		"_postman_id": "58ccdee9-c4a3-4c6f-be45-e53b58b50741",
		"name": "MiddlewareDemo",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "8286723"
	},
	"item": [
		{
			"name": "cdrEndpointValidatorTests",
			"item": [
				{
					"name": "Use Case - Get Energy Plans",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/energy/plans"
					},
					"response": []
				},
				{
					"name": "Use Case - Not a CDR endpoint",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 404\", function () {",
									"            pm.response.to.have.status(404);",
									"        });",
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"                // Schema payload check",
									"        pm.test('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"            var errMessage= jsonData?.errors[0]?.code;",
									"            var exptectedMessage = \"urn:au-cds:error:cds-all:Resource/NotFound\"",
									"            pm.expect(errMessage).to.equal(exptectedMessage)",
									"        });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/energy/all-plans"
					},
					"response": []
				},
				{
					"name": "Use Case - Valid CDR but not implemented",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 404\", function () {",
									"            pm.response.to.have.status(404);",
									"        });",
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"                // Schema payload check",
									"        pm.test('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"            var errMessage= jsonData?.errors[0]?.code;",
									"            var exptectedMessage = \"urn:au-cds:error:cds-all:Resource/NotImplemented\"",
									"            pm.expect(errMessage).to.equal(exptectedMessage)",
									"        });  "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/energy/electricity/servicepoints"
					},
					"response": []
				}
			],
			"description": "The enpoint validator middleware will construct an appropriate error object if a url is not a CDR endpoint, or is an endpoint which has not been implemented byt the DH."
		},
		{
			"name": "cdrHeaderValidatorTests",
			"item": [
				{
					"name": "Use Case: Invalid x-min-v header is provided, eg alpha character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"",
									"        // Schema payload check",
									"        pm.test('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"            var errMessage= jsonData?.errors[0]?.code;",
									"            var exptectedMessage = \"urn:au-cds:error:cds-all:Header/InvalidVersion\"",
									"            pm.expect(errMessage).to.equal(exptectedMessage)",
									"        });    ",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "2.4",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "1f9b94f6-3049-401f-bb71-e12ab3c6b343",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/energy/accounts"
					},
					"response": []
				},
				{
					"name": "Use Case: No x-v header is provided in the request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"",
									"        // Schema payload check",
									"        pm.test('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"            var errMessage= jsonData?.errors[0]?.code;",
									"            var exptectedMessage = \"urn:au-cds:error:cds-all:Header/Missing\"",
									"            pm.expect(errMessage).to.equal(exptectedMessage)",
									"        });    "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-min-v",
								"value": "2.4",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "1f9b94f6-3049-401f-bb71-e12ab3c6b343",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/energy/accounts"
					},
					"response": []
				},
				{
					"name": "Use Case: Invalid x-v header is provided, eg alpha character",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"",
									"        // Schema payload check",
									"        pm.test('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"            var errMessage= jsonData?.errors[0]?.code;",
									"            var exptectedMessage = \"urn:au-cds:error:cds-all:Header/InvalidVersion\"",
									"            pm.expect(errMessage).to.equal(exptectedMessage)",
									"        });    "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "wewer",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "2.4",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "1f9b94f6-3049-401f-bb71-e12ab3c6b343",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/energy/accounts"
					},
					"response": []
				},
				{
					"name": "Use Case: A requested version is not supported",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 406\", function () {",
									"            pm.response.to.have.status(406);",
									"        });",
									"",
									"",
									"        // Schema payload check",
									"        pm.test('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"            var errMessage= jsonData?.errors[0]?.code;",
									"            var exptectedMessage = \"urn:au-cds:error:cds-all:Header/UnsupportedVersion\"",
									"            pm.expect(errMessage).to.equal(exptectedMessage)",
									"        });    "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "1f9b94f6-3049-401f-bb71-e12ab3c6b343",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/energy/accounts/12345"
					},
					"response": []
				},
				{
					"name": "Use Case: Invalid x-fapi-interaction-id header is provided, ie not a GUID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 400\", function () {",
									"            pm.response.to.have.status(400);",
									"        });",
									"",
									"",
									"        // Schema payload check",
									"        pm.test('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"            var errMessage= jsonData?.errors[0]?.code;",
									"            var exptectedMessage = \"urn:au-cds:error:cds-all:Header/Invalid\"",
									"            pm.expect(errMessage).to.equal(exptectedMessage)",
									"        });    "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "1",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "1f9b94f6-3049-401f-bb71-e",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/energy/accounts"
					},
					"response": []
				},
				{
					"name": "Use Case: No x-fapi-interaction-id header is provided",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\");",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "2",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "2",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "1f9b94f6-3049-401f-bb71-e",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/energy/accounts"
					},
					"response": []
				},
				{
					"name": "Use Case: x-fapi-interaction-id header in header is returned",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"",
									"        pm.test(\"x-fapi-interaction-id header is present and has correct value\", function () {",
									"            pm.response.to.have.header(\"x-fapi-interaction-id\", pm.variables.get(\"x-fapi-interaction-id\"));",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "2",
								"type": "text"
							},
							{
								"key": "x-min-v",
								"value": "2",
								"type": "text"
							},
							{
								"key": "x-fapi-interaction-id",
								"value": "{{x-fapi-interaction-id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": "{{baseUrl}}/energy/accounts"
					},
					"response": []
				}
			],
			"description": "The header validator middleware will check for existence and validity of a number of required headers under the CDR regime. Additionally, it will validate requested API versions against implemented versions.\n\nError objects are constructed and returned as required."
		},
		{
			"name": "cdrScopeValidatorTests",
			"item": [
				{
					"name": "Use Case - Get Banking account details Invalid Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 403\", function () {",
									"            pm.response.to.have.status(403);",
									"        });",
									"",
									"",
									"        // Schema payload check",
									"        pm.test('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"            var errMessage= jsonData?.errors[0]?.code;",
									"            var exptectedMessage = \"urn:au-cds:error:cds-all:Authorisation/InvalidConsent\"",
									"            pm.expect(errMessage).to.equal(exptectedMessage)",
									"        });    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "3",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/banking/accounts/12345"
					},
					"response": []
				},
				{
					"name": "Use Case - Get Energy - Valid Scope",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "2",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/energy/accounts"
					},
					"response": []
				}
			],
			"description": "The scope validator will determine if the assigned scope matches the required scope."
		},
		{
			"name": "cdrResourceValidatorTests",
			"item": [
				{
					"name": "Use Case - Get Energy Account Detail - Invalid Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 404\", function () {",
									"            pm.response.to.have.status(404);",
									"        });",
									"",
									"",
									"        // Parse the response body",
									"        var jsonData;",
									"        try {",
									"            jsonData = pm.response.json();",
									"",
									"            }",
									"        catch(e) {",
									"            console.log(e);",
									"        }",
									"",
									"",
									"        // Schema payload check",
									"        pm.test('Response payload conforms to standards schema', function() {",
									"            const valid = ajv.validate(\"ResponseErrorListV2\", jsonData)",
									"            if (!valid){",
									"            ajv.errors.forEach(element => {",
									"                console.log(JSON.stringify(element));",
									"                });",
									"            };",
									"",
									"            pm.expect(valid, JSON.stringify(ajv.errors)).to.be.true; ",
									"            var errMessage= jsonData?.errors[0]?.code;",
									"            var exptectedMessage = \"urn:au-cds:error:cds-all:Resource/Invalid\"",
									"            pm.expect(errMessage).to.equal(exptectedMessage)",
									"        });    "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "3",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/energy/accounts/123456"
					},
					"response": []
				},
				{
					"name": "Use Case - Get Energy Account Detail - Valid Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"        // HTTP Response and headers",
									"        pm.test(\"Status code is 200\", function () {",
									"            pm.response.to.have.status(200);",
									"        });"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "{{accessToken}}"
							}
						},
						"method": "GET",
						"header": [
							{
								"key": "x-v",
								"value": "3",
								"type": "text"
							}
						],
						"url": "{{baseUrl}}/energy/accounts/12345"
					},
					"response": []
				}
			],
			"description": "The resource validator will validate specific resource identifiers which form part of the request url (eg :accountId) and validate that the current user has access to these resources."
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": {
			"token": "{{accessToken}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let Ajv = require('ajv');",
					"ajv = new Ajv({logger: console});",
					"",
					"var version = pm.collectionVariables.get(\"version\");",
					"var schemaBaseUrl = \"https://raw.githubusercontent.com/ConsumerDataStandardsAustralia/dsb-schema-tools/main/\";",
					"",
					"var urlEnergySchemaValidationFileDirectory = schemaBaseUrl + version + \"/postman/postman-validation-energy-\" + version + \".json\";",
					"",
					"",
					"pm.sendRequest(urlEnergySchemaValidationFileDirectory, (error, responseEnergy) => {",
					"    console.log(\"Reading schema files for energy....\"); ",
					"    if (error) {",
					"        console.log('Getting schema returned: ' + error);",
					"    } else {",
					"        ",
					"        try { ",
					"            let energySchemaCount = 0;",
					"            let energySchemaAdded = 0;",
					"            console.log(\"RESPONSE: \" + responseEnergy.json());",
					"            let schemaEnergy = responseEnergy.json();",
					"            for (var key in schemaEnergy) {",
					"                energySchemaCount++;",
					"                if (schemaEnergy.hasOwnProperty(key)) {",
					"                    schemaEnergy[key].$id = key;",
					"                    try {",
					"                        ajv.addSchema(schemaEnergy[key]);",
					"                        energySchemaAdded++;",
					"                    }",
					"                    catch(ex){",
					"                        console.log(\"Exception in \" + key + \" : \" + JSON.stringify(ex));",
					"                    }",
					"                    ",
					"                }",
					"            }",
					"            console.log(\"Energy schema contains \" + energySchemaCount + \" entries\") ;",
					"            console.log(\"Added \" + energySchemaAdded + \" schemas from Energy\"); ;  ",
					"        } catch(e) {",
					"            console.log(\"Exception :\" + JSON.stringify(e));",
					"        }",
					"                ",
					"    }",
					"}); "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "accessToken",
			"value": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1c2VyIiwicmVmcmVzaF90b2tlbl9leHBpcmVzX2F0IjoxODg0ODYzMzU1LCJhenAiOiJjbGllbnQiLCJzY29wZSI6ImJhbms6YWNjb3VudHMuZGV0YWlsOnJlYWQgYmFuazphY2NvdW50cy5iYXNpYzpyZWFkIGFkZHJlc3Mgb3BlbmlkIGNvbW1vbjpjdXN0b21lci5kZXRhaWw6cmVhZCBiYW5rOnRyYW5zYWN0aW9uczpyZWFkIHByb2ZpbGUgY29tbW9uOmN1c3RvbWVyLmJhc2ljOnJlYWQgYmFuazpyZWd1bGFyX3BheW1lbnRzOnJlYWQgYmFuazpwYXllZXM6cmVhZCBlbmVyZ3k6YmlsbGluZzpyZWFkIGVuZXJneTphY2NvdW50cy5jb25jZXNzaW9uczpyZWFkIGVuZXJneTphY2NvdW50cy5iYXNpYzpyZWFkIGVuZXJneTphY2NvdW50cy5kZXRhaWw6cmVhZCBlbmVyZ3k6YWNjb3VudHMucGF5bWVudHNjaGVkdWxlOnJlYWQgZW5lcmd5OmVsZWN0cmljaXR5LmRlcjpyZWFkIGVuZXJneTplbGVjdHJpY2l0eS5zZXJ2aWNlcG9pbnRzLmRldGFpbDpyZWFkIGVuZXJneTplbGVjdHJpY2l0eS51c2FnZTpyZWFkIHBob25lIG9mZmxpbmVfYWNjZXNzIGVtYWlsIiwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo4MDgwL2Nkcy1vcGVuaWQtY29ubmVjdC1zZXJ2ZXIvIiwiZXhwIjoxODg0ODU2OTU1LCJpYXQiOjE4ODQ4NTMzNTUsImp0aSI6IjgwZjQ5YjFlLTRlMzUtNGM1Yi1iOWE3LThhMGU4OGUzMzJhYiJ9.SpTZ_zV_9THXND8zbXu9Db_gGM5sA0V3S6vqw6jq57I",
			"type": "string"
		},
		{
			"key": "baseUrl",
			"value": "http://localhost:3000/cds-au/v1",
			"type": "string"
		},
		{
			"key": "version",
			"value": "1.26.0",
			"type": "string"
		},
		{
			"key": "x-fapi-interaction-id",
			"value": "7e4233db-6938-438d-8689-7a8b1b46d977",
			"type": "string"
		},
		{
			"key": "alternativeBaseUrl",
			"value": "http://localhost:3000/prod-data/cds-au/v1",
			"type": "string"
		}
	]
}